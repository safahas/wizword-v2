import os
import json
import time
import random
import requests
import logging
import smtplib
from email.mime.text import MIMEText
from typing import Tuple, Optional, Dict, List
from pathlib import Path
from dotenv import load_dotenv
import re
import base64

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
env_path = Path(__file__).parent.parent / '.env'
logger.info(f"Looking for .env file at: {env_path.absolute()}")
load_dotenv(env_path)

class WordSelector:
    # Define available categories
    CATEGORIES = [
        "general",
        "animals",
        "food",
        "places",
        "science",
        "tech",
        "sports",
        "movies",
        "music",
        "brands",
        "history",
        "random"
    ]

    # Class-level set to track recently used words across all instances
    _recently_used_words = set()
    _max_recent_words = 50  # Maximum number of words to remember

    def __init__(self):
        """Initialize the WordSelector with necessary data and settings."""
        self.logger = logging.getLogger(__name__)
        
        # Load data from JSON files
        self.data_dir = os.path.join(os.path.dirname(__file__), 'data')
        self._load_data()
        
        # Initialize other settings
        self.api_key = os.getenv('OPENROUTER_API_KEY')
        self.api_base = "https://openrouter.ai/api/v1"
        self.is_fallback_mode = not self.validate_api_key()
        if self.is_fallback_mode:
            self.logger.info("Running in fallback mode")
        else:
            self.logger.info("Running in API mode")

    def _load_data(self):
        """Load words and hints from JSON files."""
        try:
            # Load words.json
            words_file = os.path.join(self.data_dir, 'words.json')
            self.logger.info(f"Loading words from: {words_file}")
            with open(words_file, 'r', encoding='utf-8') as f:
                self.words_data = json.load(f)
            
            # Load hints.json
            hints_file = os.path.join(self.data_dir, 'hints.json')
            self.logger.info(f"Loading hints from: {hints_file}")
            with open(hints_file, 'r', encoding='utf-8') as f:
                self.hints_data = json.load(f)
                
            # Debug logging for hints data structure
            self.logger.info("Hints data structure:")
            self.logger.info(f"Keys in hints_data: {list(self.hints_data.keys())}")
            if "categories" in self.hints_data:
                self.logger.info(f"Categories in hints_data: {list(self.hints_data['categories'].keys())}")
            if "templates" in self.hints_data:
                self.logger.info(f"Templates in hints_data: {list(self.hints_data['templates'].keys())}")
            
            return True
        except FileNotFoundError as e:
            self.logger.error(f"Data file not found: {e}")
            return False
        except json.JSONDecodeError as e:
            self.logger.error(f"Invalid JSON in data file: {e}")
            return False
        except Exception as e:
            self.logger.error(f"Error loading data files: {e}")
            return False

    def validate_api_key(self) -> bool:
        """Validate that the API key is set."""
        if not self.api_key:
            self.logger.warning("No OpenRouter API key found. Using fallback mode.")
            return False
        return True

    def get_semantic_hint(self, word: str, subject: str, previous_hints: List[str] = None, max_hints: int = 10) -> str:
        """Get a semantic hint for the word."""
        if previous_hints is None:
            previous_hints = []
            
        self.logger.info(f"Getting hint for word '{word}' in subject '{subject}'")
        self.logger.info(f"Previous hints: {previous_hints}")
        
        # Map category to main category
        category_mapping = {
            "tech": "science",
            "sports": "general",
            "movies": "general",
            "music": "general",
            "brands": "general",
            "history": "general",
            "random": "general"
        }
        main_category = category_mapping.get(subject, subject)
        self.logger.info(f"Using main category: {main_category}")
        
        try:
            hints = []
            
            # Try to get hints from templates in hints.json
            if "templates" in self.hints_data:
                self.logger.info("Found templates section")
                if main_category in self.hints_data["templates"]:
                    self.logger.info(f"Found category '{main_category}' in templates")
                    if word in self.hints_data["templates"][main_category]:
                        word_hints = self.hints_data["templates"][main_category][word]
                        self.logger.info(f"Found {len(word_hints)} hints for word in templates")
                        hints.extend(word_hints)
                    else:
                        self.logger.warning(f"Word '{word}' not found in templates for category '{main_category}'")
                else:
                    self.logger.warning(f"Category '{main_category}' not found in templates")
            else:
                self.logger.warning("No templates section found in hints data")
            
            # If we have hints, filter and return one
            if hints:
                self.logger.info(f"Total hints available: {len(hints)}")
                if previous_hints:
                    unused_hints = [h for h in hints if h not in previous_hints]
                    self.logger.info(f"Unused hints available: {len(unused_hints)}")
                    if unused_hints:
                        hint = random.choice(unused_hints)
                        self.logger.info(f"Selected hint: {hint}")
                        return hint
                else:
                    hint = random.choice(hints)
                    self.logger.info(f"Selected hint: {hint}")
                    return hint
            else:
                self.logger.warning("No hints found in templates, using fallback")
            
            # If no hints found in file or all hints used, use fallback
            return self._get_fallback_semantic_hint(word, subject, previous_hints, max_hints)
            
        except Exception as e:
            self.logger.error(f"Error getting hint from hints.json: {e}")
            return self._get_fallback_semantic_hint(word, subject, previous_hints, max_hints)

    def _get_fallback_semantic_hint(self, word: str, subject: str, previous_hints: List[str] = None, max_hints: int = 10) -> str:
        """Generate a fallback hint when API is not available."""
        if previous_hints is None:
            previous_hints = []
            
        self.logger.info(f"Generating fallback hint for word '{word}' in subject '{subject}'")
        
        hints = []
        
        # Basic hints that don't require API
        basic_hints = [
            f"This is a {len(word)}-letter {subject} word",
            f"This word starts with the letter '{word[0]}'",
            f"This word ends with the letter '{word[-1]}'",
        ]
        
        # Add category-specific hints
        category_hints = []
        if subject == "animals":
            category_hints = [
                "This is a member of the fauna",
                "This is a living creature",
                "This belongs to the animal kingdom"
            ]
        elif subject == "food":
            category_hints = [
                "This is something you can eat",
                "This is edible",
                "This is related to cuisine"
            ]
        elif subject == "science":
            category_hints = [
                "This is a scientific term",
                "This is used in scientific contexts",
                "This relates to scientific study"
            ]
        elif subject == "places":
            category_hints = [
                "This is a geographical location",
                "This is somewhere you can visit",
                "This is a place you might find on a map"
            ]
        
        # Add hints in order of specificity
        if category_hints:
            hints.extend(category_hints)
        hints.extend(basic_hints)
        
        # Filter out previously used hints
        if previous_hints:
            hints = [h for h in hints if h not in previous_hints]
            self.logger.info(f"Found {len(hints)} unused hints after filtering")
        
        # If we still have hints, return a random one
        if hints:
            hint = random.choice(hints)
            self.logger.info(f"Selected fallback hint: {hint}")
            return hint
        
        # Ultimate fallback
        self.logger.warning("No hints available, using ultimate fallback")
        return f"This is a {len(word)}-letter word"

    def select_word(self, word_length: int = 5, subject: str = "general") -> str:
        """Select a word of the specified length and subject."""
        # Map category to main category
        category_mapping = {
            "tech": "science",
            "sports": "general",
            "movies": "general",
            "music": "general",
            "brands": "general",
            "history": "general",
            "random": random.choice(["general", "animals", "food", "places", "science"])
        }
        
        # Get the main category
        main_category = category_mapping.get(subject, subject)
        self.logger.info(f"Selecting word: length={word_length}, original_subject={subject}, main_category={main_category}")
        
        try:
            # Get words of the specified length for the category
            available_words = self.words_data[main_category][str(word_length)]
            self.logger.info(f"Found {len(available_words)} available words")
            
            # Filter out recently used words
            unused_words = [w for w in available_words if w not in self._recently_used_words]
            self.logger.info(f"Found {len(unused_words)} unused words")
            
            # If all words have been used, clear the recent words list
            if not unused_words:
                self.logger.info("All words used, clearing recent words list")
                self._recently_used_words.clear()
                unused_words = available_words
            
            # Select a random word
            word = random.choice(unused_words)
            self.logger.info(f"Selected word: {word}")
            
            # Add to recently used words
            self._recently_used_words.add(word)
            
            # Maintain max size of recently used words
            if len(self._recently_used_words) > self._max_recent_words:
                self._recently_used_words.pop()
            
            # Check if word has hints in templates
            if "templates" in self.hints_data:
                if main_category in self.hints_data["templates"]:
                    if word in self.hints_data["templates"][main_category]:
                        self.logger.info(f"Found {len(self.hints_data['templates'][main_category][word])} hints for word in templates")
                    else:
                        self.logger.warning(f"No hints found for word '{word}' in templates")
                else:
                    self.logger.warning(f"Category '{main_category}' not found in templates")
            else:
                self.logger.warning("No templates found in hints data")
            
            return word
            
        except Exception as e:
            self.logger.error(f"Error selecting word: {e}")
            return self.get_fallback_word(word_length, subject)

    def verify_guess(self, word: str, guess: str) -> bool:
        """Verify if the guess matches the word."""
        return word.lower() == guess.lower()

    def answer_question(self, word: str, question: str) -> str:
        """Answer a question about the word."""
        if self.is_fallback_mode:
            return self._answer_question_fallback(word, question)

        try:
            # Try to get answer from hints.json first
            if "questions" in self.hints_data:
                for q_pattern, answer in self.hints_data["questions"].items():
                    if re.match(q_pattern, question.lower()):
                        return answer.format(word=word)
            
            # If no match found, use fallback
            return self._answer_question_fallback(word, question)
            
        except Exception as e:
            self.logger.error(f"Error answering question: {e}")
            return self._answer_question_fallback(word, question)

    def _answer_question_fallback(self, word: str, question: str) -> str:
        """Generate a fallback answer when API is not available."""
        question = question.lower()
        
        # Check for letter presence
        letter_match = re.search(r"contain.*letter ['\"]?([a-z])['\"]?", question)
        if letter_match:
            letter = letter_match.group(1)
            return "Yes" if letter in word else "No"
        
        # Check for word length
        if "how many letters" in question:
            return f"The word has {len(word)} letters"
        
        # Check for first letter
        if "first letter" in question:
            return f"The first letter is '{word[0]}'"
        
        # Check for last letter
        if "last letter" in question:
            return f"The last letter is '{word[-1]}'"
        
        # Default response
        return "I can only answer questions about letters and word length in fallback mode"

    def generate_all_hints(self, word: str, subject: str) -> List[str]:
        """Generate all available hints for a word."""
        hints = []
        
        # Add basic hints
        hints.extend([
            f"This is a {len(word)}-letter {subject} word",
            f"This word starts with the letter '{word[0]}'",
            f"This word ends with the letter '{word[-1]}'",
        ])
        
        # Add category-specific hints
        if subject == "animals":
            hints.extend([
                "This is a member of the fauna",
                f"This animal has {len(word)} letters",
                "This is a living creature",
                "This belongs to the animal kingdom",
                "This is a type of fauna"
            ])
        elif subject == "food":
            hints.extend([
                "This is something you can eat",
                f"This is a {len(word)}-letter food item",
                "This is edible",
                "This is related to cuisine",
                "This is something found in kitchens"
            ])
        elif subject == "science":
            hints.extend([
                "This is a scientific term",
                "This is used in scientific contexts",
                "This relates to scientific study",
                "This is found in science textbooks",
                "This is a term used by scientists"
            ])
        elif subject == "places":
            hints.extend([
                "This is a geographical location",
                f"This place has {len(word)} letters",
                "This is somewhere you can visit",
                "This is a location on Earth",
                "This is a place you might find on a map"
            ])
        
        # Try to get hints from hints.json
        try:
            if subject in self.hints_data.get("categories", {}) and \
               str(len(word)) in self.hints_data["categories"][subject] and \
               word in self.hints_data["categories"][subject][str(len(word))]:
                hints.extend(self.hints_data["categories"][subject][str(len(word))][word])
        except Exception as e:
            self.logger.error(f"Error getting hints from JSON: {e}")
        
        return hints

    def get_fallback_word(self, word_length: int, subject: str) -> str:
        """Get a fallback word when normal selection fails."""
        fallback_words = {
            3: {
                "general": "cat",
                "animals": "dog",
                "food": "pie",
                "places": "bay",
                "science": "lab"
            },
            4: {
                "general": "time",
                "animals": "bear",
                "food": "cake",
                "places": "city",
                "science": "atom"
            },
            5: {
                "general": "world",
                "animals": "tiger",
                "food": "bread",
                "places": "beach",
                "science": "force"
            }
        }
        
        # Get the main category if it's an alternative category
        category_mapping = {
            "tech": "science",
            "sports": "general",
            "movies": "general",
            "music": "general",
            "brands": "general",
            "history": "general",
            "random": random.choice(["general", "animals", "food", "places", "science"])
        }
        main_category = category_mapping.get(subject, subject)
        
        # Try to get a word for the specified length
        if word_length in fallback_words and main_category in fallback_words[word_length]:
            return fallback_words[word_length][main_category]
        
        # If no word found for the specified length, use a default word
        return "hello"  # Ultimate fallback 