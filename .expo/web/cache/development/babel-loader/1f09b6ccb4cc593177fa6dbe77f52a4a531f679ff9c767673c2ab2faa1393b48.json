{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\CICD Student\\\\cursor ai agent\\\\game_guess\\\\src\\\\screens\\\\GameScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Button, Text, TextInput, Card, Snackbar } from 'react-native-paper';\nimport axios from 'axios';\nimport { API_URL, getFallbackHint, getFallbackWord } from \"../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameScreen(_ref) {\n  var _this = this;\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _route$params = route.params,\n    wordLength = _route$params.wordLength,\n    category = _route$params.category,\n    mode = _route$params.mode,\n    nickname = _route$params.nickname;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    question = _useState2[0],\n    setQuestion = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hints = _useState4[0],\n    setHints = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    finalGuess = _useState6[0],\n    setFinalGuess = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(Date.now()),\n    _useState0 = _slicedToArray(_useState9, 1),\n    startTime = _useState0[0];\n  var _useState1 = useState(false),\n    _useState10 = _slicedToArray(_useState1, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    error = _useState12[0],\n    setError = _useState12[1];\n  var _useState13 = useState(true),\n    _useState14 = _slicedToArray(_useState13, 2),\n    fallbackMode = _useState14[0],\n    setFallbackMode = _useState14[1];\n  var _useState15 = useState(''),\n    _useState16 = _slicedToArray(_useState15, 2),\n    targetWord = _useState16[0],\n    setTargetWord = _useState16[1];\n  useEffect(function () {\n    var word = getFallbackWord(category, wordLength);\n    setTargetWord(word);\n    console.log('Selected word:', word);\n  }, []);\n  var askQuestion = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!question.trim()) {\n        setError('Please enter a question');\n        return;\n      }\n      setLoading(true);\n      setError(null);\n      try {\n        var hint = getFallbackHint(question, targetWord);\n        console.log('Question:', question, 'Hint:', hint);\n        setHints(function (prev) {\n          return [].concat(_toConsumableArray(prev), [{\n            question: question,\n            answer: hint\n          }]);\n        });\n        if (mode === 'challenge') {\n          setScore(function (prev) {\n            return prev + 10;\n          });\n        }\n        setQuestion('');\n      } catch (error) {\n        console.error('Error processing question:', error);\n        setError('Failed to process question. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function askQuestion() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var submitGuess = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      setLoading(true);\n      setError(null);\n      try {\n        if (fallbackMode) {\n          var isCorrect = finalGuess.toLowerCase() === targetWord.toLowerCase();\n          if (isCorrect) {\n            navigation.navigate('Result', {\n              word: targetWord,\n              score: score,\n              questionsCount: hints.length,\n              timeTaken: (Date.now() - startTime) / 1000\n            });\n          } else {\n            setError('Incorrect guess. Try again!');\n            if (mode === 'challenge') {\n              setScore(function (prev) {\n                return prev + 10;\n              });\n            }\n          }\n        } else {\n          var response = yield axios.post(`${API_URL}/guess`, {\n            guess: finalGuess,\n            wordLength: wordLength,\n            category: category,\n            mode: mode,\n            nickname: nickname\n          });\n          if (response.data.isCorrect) {\n            navigation.navigate('Result', {\n              word: finalGuess,\n              score: score,\n              questionsCount: hints.length,\n              timeTaken: (Date.now() - startTime) / 1000\n            });\n          } else {\n            setError('Incorrect guess. Try again!');\n            if (mode === 'challenge') {\n              setScore(function (prev) {\n                return prev + 10;\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error submitting guess:', error);\n        setError('Failed to submit guess. Switching to offline mode...');\n        setFallbackMode(true);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function submitGuess() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [fallbackMode && _jsxDEV(Card, {\n      style: styles.offlineCard,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Text, {\n          variant: \"titleMedium\",\n          children: \"Offline Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), _jsxDEV(Text, {\n          variant: \"bodyMedium\",\n          children: \"Playing with local word list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), _jsxDEV(ScrollView, {\n      style: styles.hintsContainer,\n      children: [_jsxDEV(Card, {\n        style: styles.hintCountCard,\n        children: _jsxDEV(Card.Content, {\n          children: [_jsxDEV(Text, {\n            variant: \"titleMedium\",\n            style: styles.hintCount,\n            children: [\"Hints Available: \", 5 - hints.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            variant: \"bodySmall\",\n            style: styles.hintInfo,\n            children: hints.length >= 5 ? 'Maximum hints reached' : 'Ask questions to get hints'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.hintsSection,\n        children: [_jsxDEV(Text, {\n          variant: \"titleLarge\",\n          style: styles.sectionTitle,\n          children: \"Hints History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), hints.map(function (hint, index) {\n          return _jsxDEV(Card, {\n            style: styles.hintCard,\n            children: _jsxDEV(Card.Content, {\n              children: [_jsxDEV(Text, {\n                variant: \"titleMedium\",\n                style: styles.question,\n                children: [\"Question #\", index + 1, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, _this), _jsxDEV(Text, {\n                variant: \"bodyMedium\",\n                style: styles.questionText,\n                children: hint.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, _this), _jsxDEV(View, {\n                style: styles.hintDivider\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, _this), _jsxDEV(Text, {\n                variant: \"titleMedium\",\n                style: styles.hintLabel,\n                children: \"Hint:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, _this), _jsxDEV(Text, {\n                variant: \"bodyMedium\",\n                style: styles.answer,\n                children: hint.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, _this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, _this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), _jsxDEV(Card, {\n      style: styles.inputCard,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Text, {\n          variant: \"titleLarge\",\n          style: styles.sectionTitle,\n          children: \"Ask a Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), _jsxDEV(TextInput, {\n          label: `Yes/No Question (${5 - hints.length} hints remaining)`,\n          value: question,\n          onChangeText: setQuestion,\n          style: styles.input,\n          disabled: loading || hints.length >= 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          mode: \"contained\",\n          onPress: askQuestion,\n          disabled: !question || loading || hints.length >= 5,\n          style: styles.button,\n          loading: loading,\n          icon: \"lightbulb-on\",\n          children: \"Get Hint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.guessSection,\n          children: [_jsxDEV(Text, {\n            variant: \"titleLarge\",\n            style: styles.sectionTitle,\n            children: \"Make a Guess\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), _jsxDEV(TextInput, {\n            label: \"Your final guess\",\n            value: finalGuess,\n            onChangeText: setFinalGuess,\n            style: styles.input,\n            disabled: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), _jsxDEV(Button, {\n            mode: \"contained\",\n            onPress: submitGuess,\n            disabled: !finalGuess || loading,\n            style: styles.button,\n            loading: loading,\n            children: \"Submit Guess\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), mode === 'challenge' && _jsxDEV(Card, {\n      style: styles.scoreCard,\n      children: _jsxDEV(Card.Content, {\n        children: _jsxDEV(Text, {\n          variant: \"headlineSmall\",\n          style: styles.score,\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), _jsxDEV(Snackbar, {\n      visible: !!error,\n      onDismiss: function onDismiss() {\n        return setError(null);\n      },\n      action: {\n        label: 'Dismiss',\n        onPress: function onPress() {\n          return setError(null);\n        }\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#B5E3FF'\n  },\n  offlineCard: {\n    marginBottom: 16,\n    backgroundColor: '#fff3e0'\n  },\n  hintsContainer: {\n    flex: 1,\n    marginBottom: 16\n  },\n  hintsSection: {\n    marginTop: 16\n  },\n  sectionTitle: {\n    color: '#1976d2',\n    fontWeight: 'bold',\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  hintCard: {\n    marginBottom: 12,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    elevation: 3,\n    borderLeftWidth: 4,\n    borderLeftColor: '#1976d2'\n  },\n  question: {\n    color: '#1976d2',\n    marginBottom: 4,\n    fontWeight: 'bold'\n  },\n  questionText: {\n    color: '#424242',\n    marginBottom: 8,\n    paddingLeft: 8\n  },\n  hintLabel: {\n    color: '#2e7d32',\n    marginBottom: 4,\n    fontWeight: 'bold'\n  },\n  answer: {\n    color: '#2e7d32',\n    fontStyle: 'italic',\n    paddingLeft: 8,\n    borderLeftWidth: 2,\n    borderLeftColor: '#2e7d32'\n  },\n  hintDivider: {\n    height: 1,\n    backgroundColor: '#e0e0e0',\n    marginVertical: 8\n  },\n  inputCard: {\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    elevation: 3,\n    marginBottom: 16\n  },\n  inputSection: {\n    gap: 8\n  },\n  guessSection: {\n    marginTop: 24,\n    paddingTop: 16,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0'\n  },\n  input: {\n    marginBottom: 8,\n    backgroundColor: '#fff'\n  },\n  button: {\n    marginBottom: 16\n  },\n  scoreCard: {\n    marginTop: 16,\n    backgroundColor: '#e3f2fd'\n  },\n  score: {\n    textAlign: 'center',\n    color: '#1976d2'\n  },\n  hintCountCard: {\n    marginBottom: 16,\n    backgroundColor: '#e3f2fd',\n    borderRadius: 8,\n    elevation: 4\n  },\n  hintCount: {\n    textAlign: 'center',\n    color: '#1976d2',\n    fontWeight: 'bold'\n  },\n  hintInfo: {\n    textAlign: 'center',\n    color: '#757575',\n    marginTop: 4\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","StyleSheet","ScrollView","Button","Text","TextInput","Card","Snackbar","axios","API_URL","getFallbackHint","getFallbackWord","jsxDEV","_jsxDEV","GameScreen","_ref","_this","route","navigation","_route$params","params","wordLength","category","mode","nickname","_useState","_useState2","_slicedToArray","question","setQuestion","_useState3","_useState4","hints","setHints","_useState5","_useState6","finalGuess","setFinalGuess","_useState7","_useState8","score","setScore","_useState9","Date","now","_useState0","startTime","_useState1","_useState10","loading","setLoading","_useState11","_useState12","error","setError","_useState13","_useState14","fallbackMode","setFallbackMode","_useState15","_useState16","targetWord","setTargetWord","word","console","log","askQuestion","_ref2","_asyncToGenerator","trim","hint","prev","concat","_toConsumableArray","answer","apply","arguments","submitGuess","_ref3","isCorrect","toLowerCase","navigate","questionsCount","length","timeTaken","response","post","guess","data","style","styles","container","children","offlineCard","Content","variant","fileName","_jsxFileName","lineNumber","columnNumber","hintsContainer","hintCountCard","hintCount","hintInfo","hintsSection","sectionTitle","map","index","hintCard","questionText","hintDivider","hintLabel","inputCard","label","value","onChangeText","input","disabled","onPress","button","icon","guessSection","scoreCard","visible","onDismiss","action","create","flex","padding","backgroundColor","marginBottom","marginTop","color","fontWeight","textAlign","borderRadius","elevation","borderLeftWidth","borderLeftColor","paddingLeft","fontStyle","height","marginVertical","inputSection","gap","paddingTop","borderTopWidth","borderTopColor"],"sources":["C:/Users/CICD Student/cursor ai agent/game_guess/src/screens/GameScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, StyleSheet, ScrollView } from 'react-native';\r\nimport { Button, Text, TextInput, Card, ActivityIndicator, Portal, Dialog, Snackbar } from 'react-native-paper';\r\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport axios from 'axios';\r\nimport { RootStackParamList, Hint, ApiResponse, Category } from '../types/navigation';\r\nimport { API_URL, getFallbackHint, getFallbackWord } from '../config/api';\r\n\r\ntype Props = NativeStackScreenProps<RootStackParamList, 'Game'>;\r\n\r\nexport default function GameScreen({ route, navigation }: Props) {\r\n  const { wordLength, category, mode, nickname } = route.params;\r\n  const [question, setQuestion] = useState('');\r\n  const [hints, setHints] = useState<Hint[]>([]);\r\n  const [finalGuess, setFinalGuess] = useState('');\r\n  const [score, setScore] = useState(0);\r\n  const [startTime] = useState(Date.now());\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [fallbackMode, setFallbackMode] = useState(true);\r\n  const [targetWord, setTargetWord] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Initialize the game with a fallback word\r\n    const word = getFallbackWord(category as Category, wordLength);\r\n    setTargetWord(word);\r\n    console.log('Selected word:', word);  // For debugging\r\n  }, []);\r\n\r\n  const askQuestion = async () => {\r\n    if (!question.trim()) {\r\n      setError('Please enter a question');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Always use fallback mode for now\r\n      const hint = getFallbackHint(question, targetWord);\r\n      console.log('Question:', question, 'Hint:', hint);  // For debugging\r\n      setHints(prev => [...prev, { question, answer: hint }]);\r\n      \r\n      if (mode === 'challenge') {\r\n        setScore(prev => prev + 10);\r\n      }\r\n      \r\n      setQuestion('');\r\n    } catch (error) {\r\n      console.error('Error processing question:', error);\r\n      setError('Failed to process question. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const submitGuess = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      if (fallbackMode) {\r\n        const isCorrect = finalGuess.toLowerCase() === targetWord.toLowerCase();\r\n        if (isCorrect) {\r\n          navigation.navigate('Result', {\r\n            word: targetWord,\r\n            score,\r\n            questionsCount: hints.length,\r\n            timeTaken: (Date.now() - startTime) / 1000\r\n          });\r\n        } else {\r\n          setError('Incorrect guess. Try again!');\r\n          if (mode === 'challenge') {\r\n            setScore(prev => prev + 10);\r\n          }\r\n        }\r\n      } else {\r\n        const response = await axios.post<ApiResponse>(`${API_URL}/guess`, {\r\n          guess: finalGuess,\r\n          wordLength,\r\n          category,\r\n          mode,\r\n          nickname\r\n        });\r\n        \r\n        if (response.data.isCorrect) {\r\n          navigation.navigate('Result', {\r\n            word: finalGuess,\r\n            score,\r\n            questionsCount: hints.length,\r\n            timeTaken: (Date.now() - startTime) / 1000\r\n          });\r\n        } else {\r\n          setError('Incorrect guess. Try again!');\r\n          if (mode === 'challenge') {\r\n            setScore(prev => prev + 10);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting guess:', error);\r\n      setError('Failed to submit guess. Switching to offline mode...');\r\n      setFallbackMode(true);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {fallbackMode && (\r\n        <Card style={styles.offlineCard}>\r\n          <Card.Content>\r\n            <Text variant=\"titleMedium\">Offline Mode</Text>\r\n            <Text variant=\"bodyMedium\">Playing with local word list</Text>\r\n          </Card.Content>\r\n        </Card>\r\n      )}\r\n\r\n      <ScrollView style={styles.hintsContainer}>\r\n        <Card style={styles.hintCountCard}>\r\n          <Card.Content>\r\n            <Text variant=\"titleMedium\" style={styles.hintCount}>\r\n              Hints Available: {5 - hints.length}\r\n            </Text>\r\n            <Text variant=\"bodySmall\" style={styles.hintInfo}>\r\n              {hints.length >= 5 ? 'Maximum hints reached' : 'Ask questions to get hints'}\r\n            </Text>\r\n          </Card.Content>\r\n        </Card>\r\n\r\n        <View style={styles.hintsSection}>\r\n          <Text variant=\"titleLarge\" style={styles.sectionTitle}>Hints History</Text>\r\n          {hints.map((hint, index) => (\r\n            <Card key={index} style={styles.hintCard}>\r\n              <Card.Content>\r\n                <Text variant=\"titleMedium\" style={styles.question}>Question #{index + 1}:</Text>\r\n                <Text variant=\"bodyMedium\" style={styles.questionText}>{hint.question}</Text>\r\n                <View style={styles.hintDivider} />\r\n                <Text variant=\"titleMedium\" style={styles.hintLabel}>Hint:</Text>\r\n                <Text variant=\"bodyMedium\" style={styles.answer}>{hint.answer}</Text>\r\n              </Card.Content>\r\n            </Card>\r\n          ))}\r\n        </View>\r\n      </ScrollView>\r\n\r\n      <Card style={styles.inputCard}>\r\n        <Card.Content>\r\n          <Text variant=\"titleLarge\" style={styles.sectionTitle}>Ask a Question</Text>\r\n          <TextInput\r\n            label={`Yes/No Question (${5 - hints.length} hints remaining)`}\r\n            value={question}\r\n            onChangeText={setQuestion}\r\n            style={styles.input}\r\n            disabled={loading || hints.length >= 5}\r\n          />\r\n          <Button\r\n            mode=\"contained\"\r\n            onPress={askQuestion}\r\n            disabled={!question || loading || hints.length >= 5}\r\n            style={styles.button}\r\n            loading={loading}\r\n            icon=\"lightbulb-on\"\r\n          >\r\n            Get Hint\r\n          </Button>\r\n\r\n          <View style={styles.guessSection}>\r\n            <Text variant=\"titleLarge\" style={styles.sectionTitle}>Make a Guess</Text>\r\n            <TextInput\r\n              label=\"Your final guess\"\r\n              value={finalGuess}\r\n              onChangeText={setFinalGuess}\r\n              style={styles.input}\r\n              disabled={loading}\r\n            />\r\n            <Button\r\n              mode=\"contained\"\r\n              onPress={submitGuess}\r\n              disabled={!finalGuess || loading}\r\n              style={styles.button}\r\n              loading={loading}\r\n            >\r\n              Submit Guess\r\n            </Button>\r\n          </View>\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      {mode === 'challenge' && (\r\n        <Card style={styles.scoreCard}>\r\n          <Card.Content>\r\n            <Text variant=\"headlineSmall\" style={styles.score}>\r\n              Score: {score}\r\n            </Text>\r\n          </Card.Content>\r\n        </Card>\r\n      )}\r\n\r\n      <Snackbar\r\n        visible={!!error}\r\n        onDismiss={() => setError(null)}\r\n        action={{\r\n          label: 'Dismiss',\r\n          onPress: () => setError(null),\r\n        }}\r\n      >\r\n        {error}\r\n      </Snackbar>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: '#B5E3FF',  // Light blue background\r\n  },\r\n  offlineCard: {\r\n    marginBottom: 16,\r\n    backgroundColor: '#fff3e0',\r\n  },\r\n  hintsContainer: {\r\n    flex: 1,\r\n    marginBottom: 16,\r\n  },\r\n  hintsSection: {\r\n    marginTop: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: '#1976d2',\r\n    fontWeight: 'bold',\r\n    marginBottom: 12,\r\n    textAlign: 'center',\r\n  },\r\n  hintCard: {\r\n    marginBottom: 12,\r\n    backgroundColor: '#fff',\r\n    borderRadius: 8,\r\n    elevation: 3,\r\n    borderLeftWidth: 4,\r\n    borderLeftColor: '#1976d2',\r\n  },\r\n  question: {\r\n    color: '#1976d2',\r\n    marginBottom: 4,\r\n    fontWeight: 'bold',\r\n  },\r\n  questionText: {\r\n    color: '#424242',\r\n    marginBottom: 8,\r\n    paddingLeft: 8,\r\n  },\r\n  hintLabel: {\r\n    color: '#2e7d32',\r\n    marginBottom: 4,\r\n    fontWeight: 'bold',\r\n  },\r\n  answer: {\r\n    color: '#2e7d32',\r\n    fontStyle: 'italic',\r\n    paddingLeft: 8,\r\n    borderLeftWidth: 2,\r\n    borderLeftColor: '#2e7d32',\r\n  },\r\n  hintDivider: {\r\n    height: 1,\r\n    backgroundColor: '#e0e0e0',\r\n    marginVertical: 8,\r\n  },\r\n  inputCard: {\r\n    backgroundColor: '#fff',\r\n    borderRadius: 8,\r\n    elevation: 3,\r\n    marginBottom: 16,\r\n  },\r\n  inputSection: {\r\n    gap: 8,\r\n  },\r\n  guessSection: {\r\n    marginTop: 24,\r\n    paddingTop: 16,\r\n    borderTopWidth: 1,\r\n    borderTopColor: '#e0e0e0',\r\n  },\r\n  input: {\r\n    marginBottom: 8,\r\n    backgroundColor: '#fff',\r\n  },\r\n  button: {\r\n    marginBottom: 16,\r\n  },\r\n  scoreCard: {\r\n    marginTop: 16,\r\n    backgroundColor: '#e3f2fd',\r\n  },\r\n  score: {\r\n    textAlign: 'center',\r\n    color: '#1976d2',\r\n  },\r\n  hintCountCard: {\r\n    marginBottom: 16,\r\n    backgroundColor: '#e3f2fd',\r\n    borderRadius: 8,\r\n    elevation: 4,\r\n  },\r\n  hintCount: {\r\n    textAlign: 'center',\r\n    color: '#1976d2',\r\n    fontWeight: 'bold',\r\n  },\r\n  hintInfo: {\r\n    textAlign: 'center',\r\n    color: '#757575',\r\n    marginTop: 4,\r\n  },\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}