{"ast":null,"code":"import Platform from\"react-native-web/dist/exports/Platform\";var DEV_API_URL='http://localhost:8501/api';var PROD_API_URL='https://your-production-api.com/api';export var API_URL=false?DEV_API_URL:PROD_API_URL;var fallbackWords={general:{3:['cat','dog','hat'],4:['book','lamp','desk'],5:['house','phone','table']},animals:{3:['cat','dog','owl'],4:['bear','lion','wolf'],5:['tiger','zebra','koala']},food:{3:['pie','ham','egg'],4:['cake','soup','fish'],5:['pizza','pasta','salad']},places:{3:['bay','sea','sky'],4:['city','town','park'],5:['beach','hotel','plaza']},science:{3:['lab','dna','ion'],4:['atom','cell','gene'],5:['laser','quark','space']},tech:{3:['app','web','cpu'],4:['code','data','wifi'],5:['cloud','phone','robot']},music:{3:['pop','rap','mix'],4:['jazz','rock','song'],5:['blues','piano','drums']}};export var getFallbackHint=function getFallbackHint(question,word){var lowerQuestion=question.toLowerCase();var lowerWord=word.toLowerCase();if(lowerQuestion.includes('start')&&lowerQuestion.includes('letter')){return`The word ${lowerWord[0]===lowerWord[0].toLowerCase()?'does':'does not'} start with '${lowerWord[0]}'`;}if(lowerQuestion.includes('end')&&lowerQuestion.includes('letter')){return`The word ${lowerWord[lowerWord.length-1]===lowerWord[lowerWord.length-1].toLowerCase()?'does':'does not'} end with '${lowerWord[lowerWord.length-1]}'`;}if(lowerQuestion.includes('contain')||lowerQuestion.includes('has')){var letters=lowerQuestion.match(/[a-z]/g)||[];for(var letter of letters){if(lowerWord.includes(letter)){return`Yes, the word contains the letter '${letter}'`;}}return'No, the word does not contain that letter';}if(lowerQuestion.includes('length')||lowerQuestion.includes('long')){return`The word is ${word.length} letters long`;}return'I cannot answer that question. Try asking about specific letters or the word length.';};export var getFallbackWord=function getFallbackWord(category,length){var words=fallbackWords[category][length]||fallbackWords.general[length];return words[Math.floor(Math.random()*words.length)];};","map":{"version":3,"names":["DEV_API_URL","PROD_API_URL","API_URL","fallbackWords","general","animals","food","places","science","tech","music","getFallbackHint","question","word","lowerQuestion","toLowerCase","lowerWord","includes","length","letters","match","letter","getFallbackWord","category","words","Math","floor","random"],"sources":["C:/Users/CICD Student/cursor ai agent/game_guess/src/config/api.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\nimport { Category } from '../types/navigation';\r\n\r\n// API configuration\r\nconst DEV_API_URL = Platform.select({\r\n  ios: 'http://localhost:8501/api',\r\n  android: 'http://10.0.2.2:8501/api',\r\n  default: 'http://localhost:8501/api'\r\n});\r\n\r\nconst PROD_API_URL = 'https://your-production-api.com/api';  // Update with your production API URL\r\n\r\nexport const API_URL = __DEV__ ? DEV_API_URL : PROD_API_URL;\r\n\r\n// Fallback word lists\r\nconst fallbackWords: Record<Category, Record<number, string[]>> = {\r\n  general: {\r\n    3: ['cat', 'dog', 'hat'],\r\n    4: ['book', 'lamp', 'desk'],\r\n    5: ['house', 'phone', 'table'],\r\n    // Add more words for other lengths\r\n  },\r\n  animals: {\r\n    3: ['cat', 'dog', 'owl'],\r\n    4: ['bear', 'lion', 'wolf'],\r\n    5: ['tiger', 'zebra', 'koala'],\r\n  },\r\n  food: {\r\n    3: ['pie', 'ham', 'egg'],\r\n    4: ['cake', 'soup', 'fish'],\r\n    5: ['pizza', 'pasta', 'salad'],\r\n  },\r\n  places: {\r\n    3: ['bay', 'sea', 'sky'],\r\n    4: ['city', 'town', 'park'],\r\n    5: ['beach', 'hotel', 'plaza'],\r\n  },\r\n  science: {\r\n    3: ['lab', 'dna', 'ion'],\r\n    4: ['atom', 'cell', 'gene'],\r\n    5: ['laser', 'quark', 'space'],\r\n  },\r\n  tech: {\r\n    3: ['app', 'web', 'cpu'],\r\n    4: ['code', 'data', 'wifi'],\r\n    5: ['cloud', 'phone', 'robot'],\r\n  },\r\n  music: {\r\n    3: ['pop', 'rap', 'mix'],\r\n    4: ['jazz', 'rock', 'song'],\r\n    5: ['blues', 'piano', 'drums'],\r\n  }\r\n};\r\n\r\n// Fallback hint generation\r\nexport const getFallbackHint = (question: string, word: string): string => {\r\n  const lowerQuestion = question.toLowerCase();\r\n  const lowerWord = word.toLowerCase();\r\n\r\n  if (lowerQuestion.includes('start') && lowerQuestion.includes('letter')) {\r\n    return `The word ${lowerWord[0] === lowerWord[0].toLowerCase() ? 'does' : 'does not'} start with '${lowerWord[0]}'`;\r\n  }\r\n\r\n  if (lowerQuestion.includes('end') && lowerQuestion.includes('letter')) {\r\n    return `The word ${lowerWord[lowerWord.length - 1] === lowerWord[lowerWord.length - 1].toLowerCase() ? 'does' : 'does not'} end with '${lowerWord[lowerWord.length - 1]}'`;\r\n  }\r\n\r\n  if (lowerQuestion.includes('contain') || lowerQuestion.includes('has')) {\r\n    const letters = lowerQuestion.match(/[a-z]/g) || [];\r\n    for (const letter of letters) {\r\n      if (lowerWord.includes(letter)) {\r\n        return `Yes, the word contains the letter '${letter}'`;\r\n      }\r\n    }\r\n    return 'No, the word does not contain that letter';\r\n  }\r\n\r\n  if (lowerQuestion.includes('length') || lowerQuestion.includes('long')) {\r\n    return `The word is ${word.length} letters long`;\r\n  }\r\n\r\n  return 'I cannot answer that question. Try asking about specific letters or the word length.';\r\n};\r\n\r\n// Get a random word from fallback list\r\nexport const getFallbackWord = (category: Category, length: number): string => {\r\n  const words = fallbackWords[category][length] || fallbackWords.general[length];\r\n  return words[Math.floor(Math.random() * words.length)];\r\n}; "],"mappings":"6DAIA,GAAM,CAAAA,WAAW,CAGN,2BACT,CAEF,GAAM,CAAAC,YAAY,CAAG,qCAAqC,CAE1D,MAAO,IAAM,CAAAC,OAAO,CAAG,MAAUF,WAAW,CAAGC,YAAY,CAG3D,GAAM,CAAAE,aAAyD,CAAG,CAChEC,OAAO,CAAE,CACP,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAE/B,CAAC,CACDC,OAAO,CAAE,CACP,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAC/B,CAAC,CACDC,IAAI,CAAE,CACJ,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAC/B,CAAC,CACDC,MAAM,CAAE,CACN,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAC/B,CAAC,CACDC,OAAO,CAAE,CACP,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAC/B,CAAC,CACDC,IAAI,CAAE,CACJ,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAC/B,CAAC,CACDC,KAAK,CAAE,CACL,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACxB,CAAC,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAC3B,CAAC,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAC/B,CACF,CAAC,CAGD,MAAO,IAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIC,QAAgB,CAAEC,IAAY,CAAa,CACzE,GAAM,CAAAC,aAAa,CAAGF,QAAQ,CAACG,WAAW,CAAC,CAAC,CAC5C,GAAM,CAAAC,SAAS,CAAGH,IAAI,CAACE,WAAW,CAAC,CAAC,CAEpC,GAAID,aAAa,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAIH,aAAa,CAACG,QAAQ,CAAC,QAAQ,CAAC,CAAE,CACvE,MAAO,YAAYD,SAAS,CAAC,CAAC,CAAC,GAAKA,SAAS,CAAC,CAAC,CAAC,CAACD,WAAW,CAAC,CAAC,CAAG,MAAM,CAAG,UAAU,gBAAgBC,SAAS,CAAC,CAAC,CAAC,GAAG,CACrH,CAEA,GAAIF,aAAa,CAACG,QAAQ,CAAC,KAAK,CAAC,EAAIH,aAAa,CAACG,QAAQ,CAAC,QAAQ,CAAC,CAAE,CACrE,MAAO,YAAYD,SAAS,CAACA,SAAS,CAACE,MAAM,CAAG,CAAC,CAAC,GAAKF,SAAS,CAACA,SAAS,CAACE,MAAM,CAAG,CAAC,CAAC,CAACH,WAAW,CAAC,CAAC,CAAG,MAAM,CAAG,UAAU,cAAcC,SAAS,CAACA,SAAS,CAACE,MAAM,CAAG,CAAC,CAAC,GAAG,CAC5K,CAEA,GAAIJ,aAAa,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAIH,aAAa,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAE,CACtE,GAAM,CAAAE,OAAO,CAAGL,aAAa,CAACM,KAAK,CAAC,QAAQ,CAAC,EAAI,EAAE,CACnD,IAAK,GAAM,CAAAC,MAAM,GAAI,CAAAF,OAAO,CAAE,CAC5B,GAAIH,SAAS,CAACC,QAAQ,CAACI,MAAM,CAAC,CAAE,CAC9B,MAAO,sCAAsCA,MAAM,GAAG,CACxD,CACF,CACA,MAAO,2CAA2C,CACpD,CAEA,GAAIP,aAAa,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAIH,aAAa,CAACG,QAAQ,CAAC,MAAM,CAAC,CAAE,CACtE,MAAO,eAAeJ,IAAI,CAACK,MAAM,eAAe,CAClD,CAEA,MAAO,sFAAsF,CAC/F,CAAC,CAGD,MAAO,IAAM,CAAAI,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIC,QAAkB,CAAEL,MAAc,CAAa,CAC7E,GAAM,CAAAM,KAAK,CAAGrB,aAAa,CAACoB,QAAQ,CAAC,CAACL,MAAM,CAAC,EAAIf,aAAa,CAACC,OAAO,CAACc,MAAM,CAAC,CAC9E,MAAO,CAAAM,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGH,KAAK,CAACN,MAAM,CAAC,CAAC,CACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}