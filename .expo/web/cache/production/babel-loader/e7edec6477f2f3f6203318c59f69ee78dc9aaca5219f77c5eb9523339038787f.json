{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import{Button,Text,TextInput,SegmentedButtons,Card,useTheme}from'react-native-paper';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";var categories=['general','animals','food','places','science','tech','music'];var wordLengths=[3,4,5,6,7,8,9,10];export default function HomeScreen(_ref){var navigation=_ref.navigation;var theme=useTheme();var _useState=useState(5),_useState2=_slicedToArray(_useState,2),wordLength=_useState2[0],setWordLength=_useState2[1];var _useState3=useState('general'),_useState4=_slicedToArray(_useState3,2),category=_useState4[0],setCategory=_useState4[1];var _useState5=useState('fun'),_useState6=_slicedToArray(_useState5,2),mode=_useState6[0],setMode=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),nickname=_useState8[0],setNickname=_useState8[1];return _jsxs(ScrollView,{style:styles.container,children:[_jsx(Card,{style:styles.headerCard,children:_jsxs(Card.Content,{children:[_jsx(Text,{variant:\"headlineLarge\",style:styles.title,children:\"Word Guess Game\"}),_jsx(Text,{variant:\"bodyLarge\",style:styles.subtitle,children:\"Test your word-guessing skills!\"})]})}),_jsx(Card,{style:styles.section,children:_jsxs(Card.Content,{children:[_jsx(Text,{variant:\"titleMedium\",style:styles.sectionTitle,children:\"Word Length\"}),_jsx(SegmentedButtons,{value:String(wordLength),onValueChange:function onValueChange(value){return setWordLength(Number(value));},buttons:wordLengths.map(function(num){return{value:String(num),label:String(num),style:styles.segmentButton};})})]})}),_jsx(Card,{style:styles.section,children:_jsxs(Card.Content,{children:[_jsx(Text,{variant:\"titleMedium\",style:styles.sectionTitle,children:\"Category\"}),_jsx(SegmentedButtons,{value:category,onValueChange:function onValueChange(value){return setCategory(value);},buttons:categories.map(function(cat){return{value:cat,label:cat.charAt(0).toUpperCase()+cat.slice(1),style:styles.segmentButton};})})]})}),_jsx(Card,{style:styles.section,children:_jsxs(Card.Content,{children:[_jsx(Text,{variant:\"titleMedium\",style:styles.sectionTitle,children:\"Game Mode\"}),_jsx(SegmentedButtons,{value:mode,onValueChange:function onValueChange(value){return setMode(value);},buttons:[{value:'fun',label:'Fun Mode',style:[styles.segmentButton,{backgroundColor:mode==='fun'?theme.colors.primary:undefined}]},{value:'challenge',label:'Challenge Mode',style:[styles.segmentButton,{backgroundColor:mode==='challenge'?theme.colors.primary:undefined}]}]}),_jsx(Text,{variant:\"bodyMedium\",style:styles.modeDescription,children:mode==='fun'?'Fun mode: No scoring, just enjoy guessing!':'Challenge mode: Score points based on your questions'})]})}),_jsx(Card,{style:styles.section,children:_jsxs(Card.Content,{children:[_jsx(Text,{variant:\"titleMedium\",style:styles.sectionTitle,children:\"Player Info\"}),_jsx(TextInput,{label:\"Nickname (optional)\",value:nickname,onChangeText:setNickname,style:styles.input,mode:\"outlined\"})]})}),_jsx(Button,{mode:\"contained\",onPress:function onPress(){return navigation.navigate('Game',{wordLength:wordLength,category:category,mode:mode,nickname:nickname});},style:styles.button,contentStyle:styles.buttonContent,children:\"Start Game\"})]});}var styles=StyleSheet.create({container:{flex:1,padding:16,backgroundColor:'#B5E3FF'},headerCard:{marginBottom:24,backgroundColor:'#fff'},title:{textAlign:'center',color:'#1976d2',marginBottom:8},subtitle:{textAlign:'center',color:'#757575'},section:{marginBottom:16,backgroundColor:'#fff'},sectionTitle:{marginBottom:16,color:'#1976d2'},segmentButton:{flex:1,paddingVertical:8},modeDescription:{marginTop:8,color:'#757575',fontStyle:'italic'},input:{marginTop:8},button:{marginVertical:24},buttonContent:{paddingVertical:8}});","map":{"version":3,"names":["React","useState","StyleSheet","ScrollView","Button","Text","TextInput","SegmentedButtons","Card","useTheme","jsx","_jsx","jsxs","_jsxs","categories","wordLengths","HomeScreen","_ref","navigation","theme","_useState","_useState2","_slicedToArray","wordLength","setWordLength","_useState3","_useState4","category","setCategory","_useState5","_useState6","mode","setMode","_useState7","_useState8","nickname","setNickname","style","styles","container","children","headerCard","Content","variant","title","subtitle","section","sectionTitle","value","String","onValueChange","Number","buttons","map","num","label","segmentButton","cat","charAt","toUpperCase","slice","backgroundColor","colors","primary","undefined","modeDescription","onChangeText","input","onPress","navigate","button","contentStyle","buttonContent","create","flex","padding","marginBottom","textAlign","color","paddingVertical","marginTop","fontStyle","marginVertical"],"sources":["C:/Users/CICD Student/cursor ai agent/game_guess/src/screens/HomeScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, ScrollView } from 'react-native';\r\nimport { Button, Text, TextInput, SegmentedButtons, Card, useTheme } from 'react-native-paper';\r\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport { RootStackParamList, Category, GameMode } from '../types/navigation';\r\n\r\ntype Props = NativeStackScreenProps<RootStackParamList, 'Home'>;\r\n\r\nconst categories: Category[] = [\r\n  'general',\r\n  'animals',\r\n  'food',\r\n  'places',\r\n  'science',\r\n  'tech',\r\n  'music'\r\n];\r\n\r\nconst wordLengths = [3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\nexport default function HomeScreen({ navigation }: Props) {\r\n  const theme = useTheme();\r\n  const [wordLength, setWordLength] = useState(5);\r\n  const [category, setCategory] = useState<Category>('general');\r\n  const [mode, setMode] = useState<GameMode>('fun');\r\n  const [nickname, setNickname] = useState('');\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Card style={styles.headerCard}>\r\n        <Card.Content>\r\n          <Text variant=\"headlineLarge\" style={styles.title}>\r\n            Word Guess Game\r\n          </Text>\r\n          <Text variant=\"bodyLarge\" style={styles.subtitle}>\r\n            Test your word-guessing skills!\r\n          </Text>\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Text variant=\"titleMedium\" style={styles.sectionTitle}>\r\n            Word Length\r\n          </Text>\r\n          <SegmentedButtons\r\n            value={String(wordLength)}\r\n            onValueChange={value => setWordLength(Number(value))}\r\n            buttons={wordLengths.map(num => ({\r\n              value: String(num),\r\n              label: String(num),\r\n              style: styles.segmentButton\r\n            }))}\r\n          />\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Text variant=\"titleMedium\" style={styles.sectionTitle}>\r\n            Category\r\n          </Text>\r\n          <SegmentedButtons\r\n            value={category}\r\n            onValueChange={value => setCategory(value as Category)}\r\n            buttons={categories.map(cat => ({\r\n              value: cat,\r\n              label: cat.charAt(0).toUpperCase() + cat.slice(1),\r\n              style: styles.segmentButton\r\n            }))}\r\n          />\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Text variant=\"titleMedium\" style={styles.sectionTitle}>\r\n            Game Mode\r\n          </Text>\r\n          <SegmentedButtons\r\n            value={mode}\r\n            onValueChange={value => setMode(value as GameMode)}\r\n            buttons={[\r\n              { \r\n                value: 'fun',\r\n                label: 'Fun Mode',\r\n                style: [styles.segmentButton, { backgroundColor: mode === 'fun' ? theme.colors.primary : undefined }]\r\n              },\r\n              { \r\n                value: 'challenge',\r\n                label: 'Challenge Mode',\r\n                style: [styles.segmentButton, { backgroundColor: mode === 'challenge' ? theme.colors.primary : undefined }]\r\n              }\r\n            ]}\r\n          />\r\n          <Text variant=\"bodyMedium\" style={styles.modeDescription}>\r\n            {mode === 'fun' \r\n              ? 'Fun mode: No scoring, just enjoy guessing!'\r\n              : 'Challenge mode: Score points based on your questions'}\r\n          </Text>\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Text variant=\"titleMedium\" style={styles.sectionTitle}>\r\n            Player Info\r\n          </Text>\r\n          <TextInput\r\n            label=\"Nickname (optional)\"\r\n            value={nickname}\r\n            onChangeText={setNickname}\r\n            style={styles.input}\r\n            mode=\"outlined\"\r\n          />\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={() => navigation.navigate('Game', {\r\n          wordLength,\r\n          category,\r\n          mode,\r\n          nickname\r\n        })}\r\n        style={styles.button}\r\n        contentStyle={styles.buttonContent}\r\n      >\r\n        Start Game\r\n      </Button>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: '#B5E3FF',\r\n  },\r\n  headerCard: {\r\n    marginBottom: 24,\r\n    backgroundColor: '#fff',\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    color: '#1976d2',\r\n    marginBottom: 8,\r\n  },\r\n  subtitle: {\r\n    textAlign: 'center',\r\n    color: '#757575',\r\n  },\r\n  section: {\r\n    marginBottom: 16,\r\n    backgroundColor: '#fff',\r\n  },\r\n  sectionTitle: {\r\n    marginBottom: 16,\r\n    color: '#1976d2',\r\n  },\r\n  segmentButton: {\r\n    flex: 1,\r\n    paddingVertical: 8,\r\n  },\r\n  modeDescription: {\r\n    marginTop: 8,\r\n    color: '#757575',\r\n    fontStyle: 'italic',\r\n  },\r\n  input: {\r\n    marginTop: 8,\r\n  },\r\n  button: {\r\n    marginVertical: 24,\r\n  },\r\n  buttonContent: {\r\n    paddingVertical: 8,\r\n  },\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}